{
    "dashboard_default": "<Dashboard\n \tname=\"transactions\" containerStyle={{ paddingLeft: 25, paddingRight: 25, paddingTop: 50, width: \"100%\" }} \n/>",
    "dashboard_shadcn": "<Dashboard\n\tname=\"transactions\"\n\tcontainerStyle={{\n\t\t\tpaddingLeft: 25,\n\t\t\t\tright: 25,\n\t\t\t\tpaddingTop: 30,\n\t\t\t\twidth: \"100%\",\n\t\t\t}}\n\n\t\t\tFilterDropdownComponent={({ \n\t\t\t\tlabel = \"Date\", \n\t\t\t\toptions = [\n\t\t\t\t\t\t{ value: 'wk', text: 'This week' },\n\t\t\t\t\t\t{ value: 'w', text: 'Last 7 days' },\n\t\t\t\t\t\t{ value: 't', text: 'Last 30 days' }\n\t\t\t\t], \n\t\t\t\tonChange = (preset) => console.log(\"Preset Changed:\", preset), \n\t\t\t\tvalue = \"\"\n\t\t\t}) => (\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<SelectScrollable\n\t\t\t\t\t  label={label}\n\t\t\t\t\t  options={[{\"label\": \"\", \"value\": \"This week\"}, {\"label\": \"\", \"value\": \"Last 7 days\"}, {\"label\": \"\", \"value\": \"Last 30 days\"}]}\n\t\t\t\t\t  onChange={handleSelectChange}\n\t\t\t\t\t  value={selection}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\tDateRangePickerComponent={({ \n\t\t\t\tdateRange = dateProp as DateRange,\n\t\t\t\tlabel = \"\", \n\t\t\t\tonChangeDateRange = (value: DateRange) => console.log(\"Date Range Changed:\", value), \n\t\t\t\tselectedPreset = \"lastMonth\", \n\t\t\t\tpresetOptions = [\n\t\t\t\t\t\t{ value: 'wk', text: 'This week' },\n\t\t\t\t\t\t{ value: 'w', text: 'Last 7 days' },\n\t\t\t\t\t\t{ value: 't', text: 'Last 30 days' }\n\t\t\t\t], \n\t\t\t\tonChangePreset = (preset) => console.log(\"Preset Changed:\", preset), \n\t\t\t\tpreset = \"defaultPreset\", \n\t\t\t\ttheme = {} \n\t\t\t}) => (\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<ShadcnDatePickerAdapter \n\t\t\t\t\t  dateRange={dateRange}\n\t\t\t\t\t  label={label}\n\t\t\t\t\t  onChangeDateRange={onChangeDateRange}\n\t\t\t\t\t  selectedPreset={selectedPreset}\n\t\t\t\t\t  presetOptions={presetOptions}\n\t\t\t\t\t  onChangePreset={onChangePreset}\n\t\t\t\t\t  preset={preset}\n\t\t\t\t\t  theme={theme}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectScrollable\n\t\t\t\t\t  label=\"Select preset\"\n\t\t\t\t\t  options={[{\"label\": \"\", \"value\": \"This week\"}, {\"label\": \"\", \"value\": \"Last 7 days\"}, {\"label\": \"\", \"value\": \"Last 30 days\"}]}\n\t\t\t\t\t  onChange={handleSelectChange}\n\t\t\t\t\t  value={preset}\n\t\t\t\t\t/>\n\n\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\tDashboardItemComponent={({ dashboardItem, children }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<CardComponent\n\t\t\t\t\t  dashboardName={dashboardItem.name}\n\t\t\t\t\t  children={children}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}}\n\t\t\t/>",
    "dashboard_material-ui": "<Dashboard\n\tname=\"transactions\"\n\tcontainerStyle={{\n\t\tpaddingLeft: 25,\n\t\tpaddingRight: 25,\n\t\tpaddingTop: 30,\n\t\twidth: \"100%\",\n\t}}\n\tFilterDropdownComponent={({ onChange, value, options, label }) => (\n\t\t<FormControl>\n\t\t\t<InputLabel id=\"demo-simple-select-label\">{label}</InputLabel>\n\t\t\t<Select\n\t\t\t\tlabelId=\"demo-simple-select-label\"\n\t\t\t\tid=\"demo-simple-select\"\n\t\t\t\tvalue={value}\n\t\t\t\tlabel={label}\n\t\t\t\tstyle={{ width: 230 }}\n\t\t\t\tonChange={(event) => onChange(event.target.value)}\n\t\t\t>\n\t\t\t\t{options.map((option) => (\n\t\t\t\t\t<MenuItem value={option.value}>{option.label}</MenuItem>\n\t\t\t\t))}\n\t\t\t</Select>\n\t\t</FormControl>\n\t)}\n\tDateRangePickerComponent={({}) => (\n\t\t<LocalizationProvider dateAdapter={AdapterDayjs}>\n\t\t\t<DateRangePicker\n\t\t\t\tslots={{ field: SingleInputDateRangeField }}\n\t\t\t\tname=\"allowedRange\"\n\t\t\t/>\n\t\t</LocalizationProvider>\n\t)}\n\tDashboardItemComponent={({ dashboardItem, children }) => {\n\t\treturn (\n\t\t\t<Card>\n\t\t\t\t<CardHeader title={dashboardItem.name}/>\n\t\t\t\t<CardContent>{children}</CardContent>\n\t\t\t</Card>\n\t\t);\n\t}}\n\t/>",
    
    "reportbuilder_default": "<ReportBuilder\n\tonChangeQuery={onChangeQuery}\n\tcontainerStyle={{ padding: 20 }}\n\t// @ts-ignore\n\tonChangeData= {onChangeDate}\n\tonChangeColumns={onChangeDate}\n\tonError={(error) => console.log(\"ERROR: \", error)}\n\ttableName=\"transactions\"\n\tdateColumn=\"created_at\"\n\tchartBuilderEnabled\n/>"    , 
    "reportbuilder_shadcn": "<ReportBuilder\n\tchartBuilderEnabled\n\tcontainerStyle={{ padding: 20 }}\n\tonChangeQuery={onChangeQuery}\n\tonChangeData= {onChangeDate}\n\tonChangeColumns={onChangeDate}\n\tonError={onChangeQuery}\n\tTable={({\n\t\tcolumns=[],\n\t\trows=[],\n\t\theight=\"\"\n\t}) => (\n\t\t<div>\n\t\t\t<TableDemo\n\t\t\tcolumns={columns}\n\t\t\trows={rows}\n\t\t\theight={height}\n\t\t\t/>\n\t\t</div>\n\t)}\n\ttableName=\"transactions\"\n\tdateColumn=\"created_at\"\n\tSelect={({\n\t\tlabel=\"Filters\",\n\t\tonChange = (value: string) => console.log(\"filter value changed to: \", value),\n\t\tvalue = \"defaultValue\",\n\t\toptions= []\n\t}) => (\n\t\t<div>\n\t\t\t<SelectScrollable\n\t\t\t\tlabel={label}\n\t\t\t\toptions= {options}\n\t\t\t\tonChange={onChange}\n\t\t\t\tvalue={value}\n\t\t\t/>\n\t\t</div>\n\t)}\n\tTextInput={({\n\t\tonChange = (e: any) => console.log(\"called on change\"),\n\t\tvalue= \"\",\n\t\tid=\"\"\n\t}) => (\n\t\t<div>\n\t\t\t<TextInput\n\t\t\tonChange={onChange}\n\t\t\tvalue={value}\n\t\t\tid={id}\n\t\t\t/>\n\t\t</div>\n\t)}\n\tButton={({\n\t\tonClick= () => console.log(\"clicked\"),\n\t\tlabel=\"\",\n\t\tprimary=true\n\t}) => (\n\t\t<div>\n\t\t\t<ButtonDemo\n\t\t\tonClick={onClick}\n\t\t\tlabel={label}\n\t\t\tprimary={primary}\n\t\t\tisDeleteButton={false}/>\n\t\t</div>\n\t)}\n\tSecondaryButton={({\n\t\tonClick= () => console.log(\"clicked\"),\n\t\tlabel=\"\",\n\t\tprimary=false\n\t\t\n\t}) => (\n\t\t<div>\n\t\t\t<ButtonDemo\n\t\t\tonClick={onClick}\n\t\t\tlabel={label}\n\t\t\tprimary={primary}\n\t\t\tisDeleteButton={false}/>\n\t\t</div>\n\t)}\n\tDeleteButton={({\n\t\tonClick= () => console.log(\"clicked\"),\n\t\tlabel=\"\",\n\t\tprimary=false,\n\t}) => (\n\t\t<div>\n\t\t\t<ButtonDemo\n\t\t\tonClick={onClick}\n\t\t\tlabel={label}\n\t\t\tprimary={primary}\n\t\t\tisDeleteButton={true}/>\n\t\t</div>\n\t)}\n\tLabel={({\n\t\tchildren=\"\"\n\t}) => (\n\t\t<LabelDemo\n\t\t>{children}</LabelDemo>\n\t)}\n\tModal={({\n\t\tchildren={},\n\t\tisOpen= false,\n\t\tonClose= () => console.log(\"closed modal\"),\n\t\ttitle=\"Add Filter\",\n\t\tsetIsOpen=(open) => isOpen=open\n\t}) => (\n\t\t<div >\n\t\t\t<DialogCloseButton\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\ttitle={title}\n\t\t\tsetIsOpen={setIsOpen}\n\t\t\t>{children}</DialogCloseButton>\n\t\t</div>\n\t)}\n\tPopover={({\n\t\tchildren={},\n\t\tonClose=() => console.log(\"closed popover\"),\n\t\tisOpen=false,\n\t\tsetIsOpen=(open) => isOpen=open,\n\t\tshowTrigger=true,\n\t\tparentRef=useRef(),\n\t\tlabel=\"\",\n\t\tstyle={\"min-width\": 200}\n\t}) => (\n\t\t<ShadcnPopover\n\t\t\tonClose={onClose}\n\t\t\tisOpen={isOpen}\n\t\t\tsetIsOpen={setIsOpen}\n\t\t\tshowTrigger={showTrigger}\n\t\t\tparentRef= {parentRef}\n\t\t\tlabel={label}\n\t\t\tstyle={style}\n\t\t\t\n\t\t>{children}</ShadcnPopover>\n\t)}\n/>",
    "reportbuilder_material-ui": "<ReportBuilder\n\tchartBuilderEnabled\n\tcontainerStyle={{ padding: 20 }}\n\tonChangeQuery={onChangeQuery}\n\tonChangeData= {onChangeDate}\n\tonChangeColumns={onChangeDate}\n\tonError={onChangeQuery}\n\tTable={({\n\t\tcolumns=[],\n\t\trows=[],\n\t\theight=\"\"\n\t}) => (\n\t\t<div>\n\t\t\t<TableDemo\n\t\t\tcolumns={columns}\n\t\t\trows={rows}\n\t\t\theight={height}\n\t\t\t/>\n\t\t</div>\n\t)}\n\ttableName=\"transactions\"\n\tdateColumn=\"created_at\"\n\tSelect={({\n\t\tlabel=\"Filters\",\n\t\tonChange = (value: string) => console.log(\"filter value changed to: \", value),\n\t\tvalue = \"defaultValue\",\n\t\toptions= []\n\t}) => (\n\t\t<div>\n\t\t\t<SelectScrollable\n\t\t\t\tlabel={label}\n\t\t\t\toptions= {options}\n\t\t\t\tonChange={onChange}\n\t\t\t\tvalue={value}\n\t\t\t/>\n\t\t</div>\n\t)}\n\tTextInput={({\n\t\tonChange = (e: any) => console.log(\"called on change\"),\n\t\tvalue= \"\",\n\t\tid=\"\"\n\t}) => (\n\t\t<div>\n\t\t\t<TextInput\n\t\t\tonChange={onChange}\n\t\t\tvalue={value}\n\t\t\tid={id}\n\t\t\t/>\n\t\t</div>\n\t)}\n\tButton={({\n\t\tonClick= () => console.log(\"clicked\"),\n\t\tlabel=\"\",\n\t\tprimary=true\n\t}) => (\n\t\t<div>\n\t\t\t<ButtonDemo\n\t\t\tonClick={onClick}\n\t\t\tlabel={label}\n\t\t\tprimary={primary}\n\t\t\tisDeleteButton={false}/>\n\t\t</div>\n\t)}\n\tSecondaryButton={({\n\t\tonClick= () => console.log(\"clicked\"),\n\t\tlabel=\"\",\n\t\tprimary=false\n\t\t\n\t}) => (\n\t\t<div>\n\t\t\t<ButtonDemo\n\t\t\tonClick={onClick}\n\t\t\tlabel={label}\n\t\t\tprimary={primary}\n\t\t\tisDeleteButton={false}/>\n\t\t</div>\n\t)}\n\tDeleteButton={({\n\t\tonClick= () => console.log(\"clicked\"),\n\t\tlabel=\"\",\n\t\tprimary=false,\n\t}) => (\n\t\t<div>\n\t\t\t<ButtonDemo\n\t\t\tonClick={onClick}\n\t\t\tlabel={label}\n\t\t\tprimary={primary}\n\t\t\tisDeleteButton={true}/>\n\t\t</div>\n\t)}\n\tLabel={({\n\t\tchildren=\"\"\n\t}) => (\n\t\t<LabelDemo\n\t\t>{children}</LabelDemo>\n\t)}\n\tModal={({\n\t\tchildren={},\n\t\tisOpen= false,\n\t\tonClose= () => console.log(\"closed modal\"),\n\t\ttitle=\"Add Filter\",\n\t\tsetIsOpen=(open) => isOpen=open\n\t}) => (\n\t\t<div >\n\t\t\t<DialogCloseButton\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\ttitle={title}\n\t\t\tsetIsOpen={setIsOpen}\n\t\t\t>{children}</DialogCloseButton>\n\t\t</div>\n\t)}\n\tPopover={({\n\t\tchildren={},\n\t\tonClose=() => console.log(\"closed popover\"),\n\t\tisOpen=false,\n\t\tsetIsOpen=(open) => isOpen=open,\n\t\tshowTrigger=true,\n\t\tparentRef=useRef(),\n\t\tlabel=\"\",\n\t\tstyle={\"min-width\": 200}\n\t}) => (\n\t\t<ShadcnPopover\n\t\t\tonClose={onClose}\n\t\t\tisOpen={isOpen}\n\t\t\tsetIsOpen={setIsOpen}\n\t\t\tshowTrigger={showTrigger}\n\t\t\tparentRef= {parentRef}\n\t\t\tlabel={label}\n\t\t\tstyle={style}\n\t\t\t\n\t\t>{children}</ShadcnPopover>\n\t)}\n/>",

    "sqleditor_default": "<SQLEditor chartBuilderEnabled containerStyle={{ height: \"calc(100vh - 140px)\", width: \"100%\" }} />",
    "sqleditor_shadcn": "<SQLEditor chartBuilderEnabled containerStyle={{ height: \"calc(100vh - 140px)\", width: \"100%\" }} ButtonComponent={({ onClick= () => console.log(\"clicked\"), label=\"\", primary=true }) => ( <div><ButtonDemo onClick={onClick} label={label} primary={primary} isDeleteButton={false}/></div> )} SecondaryButtonComponent={({ onClick= () => console.log(\"clicked\"), label=\"\", primary=true }) => ( <div><ButtonDemo onClick={onClick} label={label} primary={primary} isDeleteButton={false}/></div> )} TextInputComponent={({ onChange = (e) => console.log(\"called on change\"), value= \"\", id=\"\", placeholder=\"\" }) => ( <div><TextInput onChange={onChange} value={value} id={id} placeholder={placeholder} /></div> )} LoadingComponent={() =>(<ReloadIcon className=\"mr-2 h-4 w-4 animate-spin\" />)} TableComponent={({ columns=[], rows=[], height=\"\" }) => ( <div><TableDemo columns={columns} rows={rows} height={height} /></div> )} />", 
    "sqleditor_material-ui": "<SQLEditor chartBuilderEnabled containerStyle={{ height: \"calc(100vh - 140px)\", width: \"100%\" }} ButtonComponent={({ onClick, label }) => ( <Button onClick={onClick} variant=\"contained\"> {label} </Button> )} SecondaryButtonComponent={({ onClick, label }) => ( <Button variant=\"outlined\" onClick={onClick}> {label} </Button> )} TextInputComponent={React.memo( ({ onChange, value, label, placeholder }) => ( <TextField onChange={(event) => onChange(event.target.value)} value={value} id=\"outlined-basic\" label={label} placeholder={placeholder} variant=\"outlined\" style={{ width: 230 }} /> ), (prevProps, nextProps) => { return prevProps.value === nextProps.value; })} LoadingComponent={() =>(<ReloadIcon className=\"mr-2 h-4 w-4 animate-spin\" />)} TableComponent={({ rows, columns }) => { const [page, setPage] = React.useState(0); const [rowsPerPage, setRowsPerPage] = React.useState(10); const handleChangePage = (event, newPage) => { setPage(newPage); }; const handleChangeRowsPerPage = ( event ) => { setRowsPerPage(+event.target.value); setPage(0); }; return ( <Paper sx={{ width: \"100%\", overflow: \"scroll\" }}> <TableContainer component={Paper}> <Table stickyHeader sx={{ minWidth: 650 }} aria-label=\"simple table\"> <TableHead> <TableRow> {columns.map((column, index) => ( <TableCell key={index} align=\"left\"> {column.label} </TableCell> ))} </TableRow> </TableHead> <TableBody> {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => ( <TableRow key={index} sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}> {columns.map((column, index) => ( <TableCell key={column.field + index} align=\"left\"> {row[column.field]} </TableCell> ))} </TableRow> ))} </TableBody> </Table> </TableContainer> <TablePagination rowsPerPageOptions={[10, 25, 100]} component=\"div\" count={rows.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} /> </Paper> ); }} />"
}
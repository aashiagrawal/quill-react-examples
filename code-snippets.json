{
    "dashboard_default": "<Dashboard name=\"transactions\" containerStyle={{ paddingLeft: 25, paddingRight: 25, paddingTop: 50, width: \"100%\" }} />",
    "dashboard_shadcn": "<Dashboard name=\"transactions\" containerStyle={{ paddingLeft: 25, paddingRight: 25, paddingTop: 30, width: \"100%\", }} FilterDropdownComponent={({ label = \"Date\", options = [{ value: 'wk', text: 'This week' }, { value: 'w', text: 'Last 7 days' }, { value: 't', text: 'Last 30 days' }], onChange = (preset) => console.log(\"Preset Changed:\", preset), value = \"\" }) => (<div className=\"flex\"><SelectScrollable label={label} options={[{\\\"label\\\": \\\"\\\", \\\"value\\\": \\\"This week\\\"}, {\\\"label\\\": \\\"\\\", \\\"value\\\": \\\"Last 7 days\\\"}, {\\\"label\\\": \\\"\\\", \\\"value\\\": \\\"Last 30 days\\\"}]} onChange={handleSelectChange} value={selection}/></div>)} ...otherProps />",
    "dashboard_material_ui": "<Dashboard name=\"transactions\" containerStyle={{ paddingLeft: 25, paddingRight: 25, paddingTop: 30, width: \"100%\", }} FilterDropdownComponent={({ onChange, value, options, label }) => ( <FormControl> <InputLabel id=\"demo-simple-select-label\">{label}</InputLabel> <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={value} label={label} style={{ width: 230 }} onChange={(event) => onChange(event.target.value)}> {options.map((option) => ( <MenuItem value={option.value}>{option.label}</MenuItem> ))} </Select> </FormControl> )} DateRangePickerComponent={({}) => ( <LocalizationProvider dateAdapter={AdapterDayjs}> <DateRangePicker slots={{ field: SingleInputDateRangeField }} name=\"allowedRange\" /> </LocalizationProvider> )} DashboardItemComponent={({ dashboardItem, children }) => { return ( <Card> <CardHeader title={dashboardItem.name}/> <CardContent>{children}</CardContent> </Card> ); }} />",
    
    "reportbuilder_default": "<ReportBuilder onChangeQuery={onChangeQuery} containerStyle={{ padding: 20 }} onChangeData={onChangeDate} onChangeColumns={onChangeDate} onError={(error) => console.log(\"ERROR: \", error)} tableName=\"transactions\" dateColumn=\"created_at\" chartBuilderEnabled />", 
    "reportbuilder_shadcn": "<ReportBuilder chartBuilderEnabled containerStyle={{ padding: 20 }} onChangeQuery={onChangeQuery} onChangeData={onChangeDate} onChangeColumns={onChangeDate} onError={onChangeQuery} Table={({ columns=[], rows=[], height='' }) => (<div><TableDemo columns={columns} rows={rows} height={height} /></div>)} tableName='transactions' dateColumn='created_at' Select={({ label='Filters', onChange = (value) => console.log('filter value changed to: ', value), value = 'defaultValue', options= [] }) => (<div><SelectScrollable label={label} options={options} onChange={onChange} value={value} /></div>)} TextInput={({ onChange = (e) => console.log('called on change'), value= '', id='' }) => (<div><TextInput onChange={onChange} value={value} id={id} /></div>)} Button={({ onClick= () => console.log('clicked'), label='', primary=true }) => (<div><ButtonDemo onClick={onClick} label={label} primary={primary} isDeleteButton={false}/></div>)} SecondaryButton={({ onClick= () => console.log('clicked'), label='', primary=false }) => (<div><ButtonDemo onClick={onClick} label={label} primary={primary} isDeleteButton={false}/></div>)} DeleteButton={({ onClick= () => console.log('clicked'), label='', primary=false, }) => (<div><ButtonDemo onClick={onClick} label={label} primary={primary} isDeleteButton={true}/></div>)} Label={({ children='' }) => (<LabelDemo>{children}</LabelDemo>)} Modal={({ children={}, isOpen= false, onClose= () => console.log('closed modal'), title='Add Filter', setIsOpen=(open) => isOpen=open }) => (<div><DialogCloseButton isOpen={isOpen} onClose={onClose} title={title} setIsOpen={setIsOpen}>{children}</DialogCloseButton></div>)} Popover={({ children={}, onClose=() => console.log('closed popover'), isOpen=false, setIsOpen=(open) => isOpen=open, showTrigger=true, parentRef=useRef(), label='', style={'min-width': 200} }) => (<ShadcnPopover onClose={onClose} isOpen={isOpen} setIsOpen={setIsOpen} showTrigger={showTrigger} parentRef={parentRef} label={label} style={style}>{children}</ShadcnPopover>)} />",
    "reportbuilder_material": "<ReportBuilder chartBuilderEnabled containerStyle={{ padding: 20 }} onChangeQuery={onChangeQuery} tableName=\"transactions\" dateColumn=\"created_at\" Button={({ onClick, label }) => ( <Button onClick={onClick} variant=\"contained\"> {label} </Button> )} SecondaryButton={({ onClick, label }) => ( <Button variant=\"outlined\" onClick={onClick}> {label} </Button> )} Table={({ rows, columns }) => { const [page, setPage] = React.useState(0); const [rowsPerPage, setRowsPerPage] = React.useState(10); const handleChangePage = (event, newPage) => { setPage(newPage); }; const handleChangeRowsPerPage = ( event ) => { setRowsPerPage(+event.target.value); setPage(0); }; return ( <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}> <TableContainer component={Paper}> <Table stickyHeader sx={{ minWidth: 650 }} aria-label=\"simple table\"> <TableHead> <TableRow> {columns.map((column, index) => ( <TableCell key={index} align=\"left\"> {column.label} </TableCell> ))} </TableRow> </TableHead> <TableBody> {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => ( <TableRow key={index} sx={{ \"&:last-child td, &:last-child th\": { border: 0 }, }}> {columns.map((column, index) => ( <TableCell key={column.field + index} align=\"left\"> {row[column.field]} </TableCell> ))} </TableRow> ))} </TableBody> </Table> </TableContainer> <TablePagination rowsPerPageOptions={[10, 25, 100]} component=\"div\" count={rows.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} /> </Paper> ); } TextInput={React.memo( ({ onChange, value, label, placeholder }) => ( <TextField onChange={(event) => onChange(event.target.value)} value={value} id=\"outlined-basic\" label={label} placeholder={placeholder} variant=\"outlined\" style={{ width: 230 }} /> ), (prevProps, nextProps) => { return prevProps.value === nextProps.value; } )} Select={({ onChange, value, options, label }) => ( <FormControl> <InputLabel id=\"demo-simple-select-label\">{label}</InputLabel> <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={value} label={label} style={{ width: 230 }} onChange={(event) => onChange(event.target.value)}> {options.map((option) => ( <MenuItem value={option.value}>{option.label}</MenuItem> ))} </Select> </FormControl> )} Header={({ children }) => ( <Typography style={{ fontWeight: \"600\", marginBottom: 8 }} variant=\"h7\" component=\"h2\"> {children} </Typography> )} SubHeader={({ children }) => ( <Typography style={{ marginBottom: 12, fontWeight: \"600\", fontSize: 14 }} > {children} </Typography> )} Label={({ children }) => <div></div>} Modal={({ children, setIsOpen, isOpen, title }) => ( <Dialog open={isOpen} onClose={() => setIsOpen(false)} scroll=\"paper\" aria-labelledby=\"scroll-dialog-title\" aria-describedby=\"scroll-dialog-description\" maxWidth=\"lg\"> <DialogTitle style={{ fontWeight: 600 }} id=\"scroll-dialog-title\"> {title} </DialogTitle> <DialogContent style={{ padding: \"0px\" }} dividers> {children} </DialogContent> </Dialog> )} Card={({ onClick, clickable, onClose, minHeight, children }) => ( <Card> <CardActionArea style={{ height: 220 }} onClick={onClick}> <CardContent style={{ padding: \"16px\" }}> {children} </CardContent> </CardActionArea> </Card> )} Popover={({ onClick, label, children, isOpen, setIsOpen, showTrigger, parentRef, title }) => { const [anchorEl, setAnchorEl] = useState(null); useEffect(() => { if (!showTrigger && parentRef && parentRef.current) { setAnchorEl(parentRef.current); } }, [parentRef, isOpen]); const open = Boolean(anchorEl); const id = open ? \"simple-popover\" : undefined; return ( <div> {showTrigger && ( <Button variant=\"outlined\" onClick={(event) => { setIsOpen(true); setAnchorEl(event.currentTarget); }}> {label} </Button> )} <Popover open={isOpen} anchorEl={anchorEl} onClose={() => { setIsOpen(false); setAnchorEl(null); }} anchorOrigin={{ vertical: showTrigger ? \"bottom\" : \"center\", horizontal: showTrigger ? \"right\" : \"left\", }}> <div style={{ padding: 20, minWidth: 400 }}> <Typography style={{ fontWeight: \"600\" }} variant=\"h7\" component=\"h2\"> {title} </Typography> <br /> <div>{children}</div> </div> </Popover> </div> ); }} />",

    "sqleditor_default": "<SQLEditor chartBuilderEnabled containerStyle={{ height: \"calc(100vh - 140px)\", width: \"100%\" }} />",
    "sqleditor_shadcn": "<SQLEditor chartBuilderEnabled containerStyle={{ height: \"calc(100vh - 140px)\", width: \"100%\" }} ButtonComponent={({ onClick= () => console.log(\"clicked\"), label=\"\", primary=true }) => ( <div><ButtonDemo onClick={onClick} label={label} primary={primary} isDeleteButton={false}/></div> )} SecondaryButtonComponent={({ onClick= () => console.log(\"clicked\"), label=\"\", primary=true }) => ( <div><ButtonDemo onClick={onClick} label={label} primary={primary} isDeleteButton={false}/></div> )} TextInputComponent={({ onChange = (e) => console.log(\"called on change\"), value= \"\", id=\"\", placeholder=\"\" }) => ( <div><TextInput onChange={onChange} value={value} id={id} placeholder={placeholder} /></div> )} LoadingComponent={() =>(<ReloadIcon className=\"mr-2 h-4 w-4 animate-spin\" />)} TableComponent={({ columns=[], rows=[], height=\"\" }) => ( <div><TableDemo columns={columns} rows={rows} height={height} /></div> )} />", 
    "sqleditor_material": "<SQLEditor chartBuilderEnabled containerStyle={{ height: \"calc(100vh - 140px)\", width: \"100%\" }} ButtonComponent={({ onClick, label }) => ( <Button onClick={onClick} variant=\"contained\"> {label} </Button> )} SecondaryButtonComponent={({ onClick, label }) => ( <Button variant=\"outlined\" onClick={onClick}> {label} </Button> )} TextInputComponent={React.memo( ({ onChange, value, label, placeholder }) => ( <TextField onChange={(event) => onChange(event.target.value)} value={value} id=\"outlined-basic\" label={label} placeholder={placeholder} variant=\"outlined\" style={{ width: 230 }} /> ), (prevProps, nextProps) => { return prevProps.value === nextProps.value; })} LoadingComponent={() =>(<ReloadIcon className=\"mr-2 h-4 w-4 animate-spin\" />)} TableComponent={({ rows, columns }) => { const [page, setPage] = React.useState(0); const [rowsPerPage, setRowsPerPage] = React.useState(10); const handleChangePage = (event, newPage) => { setPage(newPage); }; const handleChangeRowsPerPage = ( event ) => { setRowsPerPage(+event.target.value); setPage(0); }; return ( <Paper sx={{ width: \"100%\", overflow: \"scroll\" }}> <TableContainer component={Paper}> <Table stickyHeader sx={{ minWidth: 650 }} aria-label=\"simple table\"> <TableHead> <TableRow> {columns.map((column, index) => ( <TableCell key={index} align=\"left\"> {column.label} </TableCell> ))} </TableRow> </TableHead> <TableBody> {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => ( <TableRow key={index} sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}> {columns.map((column, index) => ( <TableCell key={column.field + index} align=\"left\"> {row[column.field]} </TableCell> ))} </TableRow> ))} </TableBody> </Table> </TableContainer> <TablePagination rowsPerPageOptions={[10, 25, 100]} component=\"div\" count={rows.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} /> </Paper> ); }} />"
}